2. Write a program for error detection and correction using Hamming Code

    #include <stdio.h>
    int main() {
    int data[7];  // Only 7 bits needed
    int dataatrec[7], c, c1, c2, c3, i;

    printf("Enter 4 bits of data one by one\n");
    scanf("%d", &data[0]);
    scanf("%d", &data[1]);
    scanf("%d", &data[2]);
    scanf("%d", &data[4]);

    // Calculation of even parity bits
    data[6] = data[0] ^ data[2] ^ data[4]; // P1
    data[5] = data[0] ^ data[1] ^ data[4]; // P2
    data[3] = data[0] ^ data[1] ^ data[2]; // P4

    printf("\nEncoded data is: ");
    for (i = 0; i < 7; i++)
    printf("%d", data[i]);

    printf("\n\nEnter received data bits one by one\n");
    for (i = 0; i < 7; i++)
        scanf("%d", &dataatrec[i]);

    // Error detection using parity bits
    c1 = dataatrec[6] ^ dataatrec[4] ^ dataatrec[2] ^ dataatrec[0];
    c2 = dataatrec[5] ^ dataatrec[4] ^ dataatrec[1] ^ dataatrec[0];
    c3 = dataatrec[3] ^ dataatrec[2] ^ dataatrec[1] ^ dataatrec[0];

    c = c3 * 4 + c2 * 2 + c1;  // Calculate error position

    if (c == 0) {
        printf("\nNo error while transmission of data\n");
    } else {
        printf("\nError detected at position %d", c);

        printf("\nData sent    : ");
        for (i = 0; i < 7; i++)
            printf("%d", data[i]);

        printf("\nData received: ");
        for (i = 0; i < 7; i++)
            printf("%d", dataatrec[i]);

        printf("\nCorrected data: ");
        
        // Flip the erroneous bit (1 to 0 or 0 to 1)
        int error_index = 7 - c;
        if (error_index >= 0 && error_index < 7) {
            dataatrec[error_index] ^= 1;
        }

        for (i = 0; i < 7; i++) {
            printf("%d", dataatrec[i]);
        }
    }

    return 0;
}

